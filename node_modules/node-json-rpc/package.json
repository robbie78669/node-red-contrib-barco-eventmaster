{
  "_args": [
    [
      {
        "raw": "node-json-rpc@~0.0.1",
        "scope": null,
        "escapedName": "node-json-rpc",
        "name": "node-json-rpc",
        "rawSpec": "~0.0.1",
        "spec": ">=0.0.1 <0.1.0",
        "type": "range"
      },
      "D:\\Dropbox\\src\\node\\node-red\\node-red-contrib-barco-eventmaster"
    ]
  ],
  "_from": "node-json-rpc@>=0.0.1 <0.1.0",
  "_id": "node-json-rpc@0.0.1",
  "_inCache": true,
  "_location": "/node-json-rpc",
  "_npmUser": {
    "name": "nemopersona",
    "email": "nemo.persona@hush.com"
  },
  "_npmVersion": "1.3.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-json-rpc@~0.0.1",
    "scope": null,
    "escapedName": "node-json-rpc",
    "name": "node-json-rpc",
    "rawSpec": "~0.0.1",
    "spec": ">=0.0.1 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-json-rpc/-/node-json-rpc-0.0.1.tgz",
  "_shasum": "8e69f87708265e84226e25ee088468253f2d491a",
  "_shrinkwrap": null,
  "_spec": "node-json-rpc@~0.0.1",
  "_where": "D:\\Dropbox\\src\\node\\node-red\\node-red-contrib-barco-eventmaster",
  "author": {
    "name": "Koen Van Rulo",
    "url": "@NemoPersona"
  },
  "bugs": {
    "url": "https://github.com/NemoPersona/node-json-rpc/issues"
  },
  "dependencies": {},
  "description": "Flexible client, server objects for json-rpc communications",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8e69f87708265e84226e25ee088468253f2d491a",
    "tarball": "https://registry.npmjs.org/node-json-rpc/-/node-json-rpc-0.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/NemoPersona/node-json-rpc#readme",
  "keywords": [
    "server",
    "client",
    "json",
    "rpc"
  ],
  "license": "BSD",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "nemopersona",
      "email": "nemo.persona@hush.com"
    }
  ],
  "name": "node-json-rpc",
  "optionalDependencies": {},
  "readme": "# Json-rpc\n\nFlexible client, server objects for json-rpc communications between node.js servers with support for https.\n\n### Install\n\n```bash\n  $ npm install node-json-rpc\n```\n\n### Info\n\nNode-json-rpc is designed to be compatible with specs defined at [jsonrpc.org](http://www.jsonrpc.org). To add flexibility we added the option to run the apps in strict mode or to turn it off. When not using strict mode allot of the bloat in the spec can be removed and more flexibility can be achieved.\n\nTo get started have a look at the minimal example down below or the more complete example in the test directory.\n\n#### Server Setup\n\nFor all posible options please read the notes in ./lib/rpcserver.js or look at test files to see a example.\n\n```javascript\nvar rpc = require('node-json-rpc');\n\nvar options = {\n  // int port of rpc server, default 5080 for http or 5433 for https\n  port: 5080,\n  // string domain name or ip of rpc server, default '127.0.0.1'\n  host: '127.0.0.1',\n  // string with default path, default '/'\n  path: '/',\n  // boolean false to turn rpc checks off, default true\n  strict: true\n};\n\n// Create a server object with options\nvar serv = new rpc.Server(options);\n\n// Add your methods\nserv.addMethod('myMethod', function (para, callback) {\n  var error, result;\n  \n  // Add 2 or more parameters together\n  if (para.length === 2) {\n    result = para[0] + para[1];\n  } else if (para.length > 2) {\n    result = 0;\n    para.forEach(function (v, i) {\n      result += v;\n    });\n  } else {\n    error = { code: -32602, message: \"Invalid params\" };\n  }\n\n  callback(error, result);\n});\n\n// Start the server\nserv.start(function (error) {\n  // Did server start succeed ?\n  if (error) throw error;\n  else console.log('Server running ...');\n});\n```\n\n#### Client Setup\n\nFor all posible options please read the notes in ./lib/rpcclient.js or look at test files to see a example.\n\n```javascript\nvar rpc = require('node-json-rpc');\n\nvar options = {\n  // int port of rpc server, default 5080 for http or 5433 for https\n  port: 5080,\n  // string domain name or ip of rpc server, default '127.0.0.1'\n  host: '127.0.0.1',\n  // string with default path, default '/'\n  path: '/',\n  // boolean false to turn rpc checks off, default true\n  strict: true\n};\n\n// Create a server object with options\nvar client = new rpc.Client(options);\n\nclient.call(\n  {\"jsonrpc\": \"2.0\", \"method\": \"myMethod\", \"params\": [1,2], \"id\": 0},\n  function (err, res) {\n    // Did it all work ?\n    if (err) { console.log(err); }\n    else { console.log(res); }\n  }\n);\n\nclient.call(\n  {\"method\": \"myMethod\", \"params\": [1,2]},\n  function (err, res) {\n    // Did it all work ?\n    if (err) { console.log(err); }\n    else { console.log(res); }\n  }\n);\n```\n\n# License\n\nCopyright (c) 2013, Koen Van Rulo (@NemoPersona) All rights reserved.  \nThis product is free and open-source software released under the BSD license.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/NemoPersona/node-json-rpc.git"
  },
  "scripts": {
    "test": "node ./test/rpc.js"
  },
  "version": "0.0.1"
}
